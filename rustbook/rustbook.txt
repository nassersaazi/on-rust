The Rust Programming Language Book

Chapter 1(Getting Started)
- using a ! means that you’re calling a macro instead of a normal function
-  Often, cargo check is much faster than cargo build, because it skips the step of producing an executable.  If you’re continually checking your work while writing the code, using cargo check will speed up the process

Chapter 2(Programming a Guessing Game)

- In Rust, variables are immutable by default
- Like variables, references are immutable by default
- The :: syntax in the ::new line indicates that new is an associated function of the String type. An associated function is implemented on a type, in this case String, rather than on a particular instance of a String. Some languages call this a static method 
- The Result types are enumerations, often referred to as enums. An enumeration is a type that can have a fixed set of values, and those values are called the enum’s variants 
- For Result, the variants are Ok or Err. The Ok variant indicates the operation was successful, and inside Ok is the successfully generated value. The Err variant means the operation failed, and Err contains information about how or why the operation failed.  The purpose of these Result types is to encode error-handling information. Values of the Result type, like values of any type, have methods defined on them. An instance of io::Result has an expect method that you can call.  If this instance of io::Result is an Err value, expect will cause the program to crash and display the message that you passed as an argument to expect
- A crate is a collection of Rust source code files
- A match expression is made up of arms. An arm consists of a pattern and the code that should be run if the value given to the beginning of the match expression fits that arm’s pattern. Rust takes the value given to match and looks through each arm’s pattern in turn. The match construct and patterns are powerful features in Rust that let you express a variety of situations your code might encounter and make sure that you handle them all
- Rust allows us to shadow the previous value of guess with a new one. This feature is often used in situations in which you want to convert a value from one type to another type
- The loop keyword creates an infinite loop

Chapter 3(Common Programming Concepts)

- Shadowing is different from marking a variable as mut, because we’ll get a compile-time error if we accidentally try to reassign to this variable without using the let keyword. By using let, we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed.
- The other difference between mut and shadowing is that because we’re effectively creating a new variable when we use the let keyword again, we can change the type of the value but reuse the same name.
- A scalar type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters
- (Note that char literals are specified with single quotes, as opposed to string literals, which use double quotes
- Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays
- In addition to destructuring through pattern matching, we can access a tuple element directly by using a period (.) followed by the index of the value we want to access
- Unlike a tuple, every element of an array must have the same type. Arrays in Rust are different from arrays in some other languages because arrays in Rust have a fixed length, like tuples
- An array is a single chunk of memory allocated on the stack. Arrays are useful when you want your data allocated on the stack rather than the heap (more on stacks and heaps in Chapter 4) or when you want to ensure you always have a fixed number of elements.
-An array isn’t as flexible as the vector type, though. A vector is a similar collection type provided by the standard library that is allowed to grow or shrink in size. An example of when you might want to use an array rather than a vector is in a program that needs to know the names of the months of the year. It’s very unlikely that such a program will need to add or remove months, so you can use an array because you know it will always contain 12 items
- If you want to create an array that contains the same value for each element, you can specify the initial value, followed by a semi- colon, and then the length of the array in square brackets, as shown here:
    let a = [3;5]; -> The array named a will contain 5 elements that will all be set to the value 3 initially. This is the same as writing let a = [3, 3, 3, 3, 3]; but in a more concise way.
- Rust code uses snake case as the conventional style for function and variable names. In snake case, all letters are lowercase and underscores separate words
- Function parameters don’t all need to be the same type
- Statements are instructions that perform some action and do not return a value. Expressions evaluate to a resulting value. Calling a function is an expression. Calling a macro is an expression. The block that we use to create new scopes, {}, is an expression
- Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, which will then not return a value.
- The most common constructs that let you control the flow of execution of Rust code are if expressions and loops
- Blocks of code associated with the conditions in if expressions are sometimes called arms, just like the arms in match expressions
-  Unlike languages such as Ruby and JavaScript, Rust will not automatically try to convert non-Boolean types to a Boolean. You must be explicit and always provide if with a Boolean as its condition
- Given multiple else if expressions, Rust only executes the block for the first true condition, and once it finds one, it doesn’t even check the rest
- Using too many else if expressions can clutter your code, so if you have more than one, you might want to refactor your code. Chapter 6 describes a powerful Rust branching construct called match for these cases
- Because if is an expression, we can use it on the right side of a let statement. Blocks of code evaluate to the last expression in them, and numbers by themselves are also expressions. In this case, the value of the whole if expression depends on which block of code executes. This means the values that have the potential to be results from each arm of the if must be the same type. If the types are mismatched, we’ll get an error
- Rust provides a way to break out of a loop. You can place the break keyword within the loop to tell the program when to stop executing the loop
- One of the uses of a loop is to retry an operation you know might fail, such as checking whether a thread has completed its job. However, you might need to pass the result of that operation to the rest of your code. To do this, you can add the value you want returned after the break expression you use to stop the loop; that value will be returned out of the loop so you can use it
- The while construct eliminates a lot of nesting that would be necessary if you used loop, if, else, and break, and it’s clearer. While a condition holds true, the code runs; otherwise, it exits the loop

todos:
- read -> https://timothya.com/learning/implementing-tcp-in-rust-attempt-1-rust/
- read https://dev.to/opendataanalytics/learning-rust-by-building-a-to-do-app-2okd
- write article on 'ownership' in Rust -> after reading chapter 4 of the Rustbook
- write article on 'enums' in Rust -> after reading chapter 6 of the Rustbook
- write article <Half an hour to Learn Bitcoin from the Commandline> -> inspiration - (https://github.com/BlockchainCommons/Learning-Bitcoin-from-the-Command-Line ,https://fasterthanli.me/articles/a-half-hour-to-learn-rust )
